<?php namespace ProcessWire;

/**
* GUID Generator
*
* See README.md for usage instructions.
*
* Forked Version
* @author Alexander Abelt 
* @copyright Copyright (c) 2025 (MIT)
* @see https://github.com/webmanufaktur/processwire-guidgenerator
*
* Original Version
* @author Tabea David <td@kf-interactive.com>
* @version 0.0.2
* @copyright Copyright (c) 2017
* @see https://github.com/justonestep/processwire-guidgenerator
* @see http://www.processwire.com
*/

/**
* Class GuidGenerator
*/
class GuidGenerator extends WireData implements Module {

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'GUID / UUID Generator',
      'summary' => 'Generate a globally unique identifier (GUID) or choose from custom format identifiers',
      'version' => '0.1.0',
      'href' => 'https://github.com/webmanufaktur/processwire-guidgenerator',
      'singular' => true,
      'autoload' => true,
      'requires' => [
        'ProcessWire>=3.0.247',
        'PHP>=8.2',
      ],
      'icon' => 'anchor',
      'author' => 'Alexander Abelt (wbmnfktr)',
    );
  }

  /**
   * Initialize the module - ready
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   *
   * @see http://processwire.com/apigen/class-Module.html
   */
  public function ready() {
    $this->addHookProperty('InputfieldText::generateGuid', $this, 'addProperty');
    $this->addHookProperty('InputfieldText::guidFormat', $this, 'addFormatProperty');
    $this->addHookProperty('InputfieldText::useGuidPrefix', $this, 'addUsePrefixProperty');
    $this->addHookProperty('InputfieldText::guidPrefix', $this, 'addPrefixProperty');
    $this->addHookAfter('InputfieldText::getConfigInputfields', $this, 'addInputfield');
    $this->addHookBefore('InputfieldText::render', $this, 'generateGuidValue');
    $this->addHookAfter('Pages::added', $this, 'generateGuidOnCreate');
  }

  /**
   * Add property for inputfield text
   *
   * @param HookEvent $event
   */
  public function addProperty(HookEvent $event) {
    $event->return = 0;
  }

  /**
   * Add format property for inputfield text
   *
   * @param HookEvent $event
   */
  public function addFormatProperty(HookEvent $event) {
    $event->return = 'uuid';
  }

  /**
   * Add useGuidPrefix property for inputfield text
   *
   * @param HookEvent $event
   */
  public function addUsePrefixProperty(HookEvent $event) {
    $event->return = 0;
  }

  /**
   * Add guidPrefix property for inputfield text
   *
   * @param HookEvent $event
   */
  public function addPrefixProperty(HookEvent $event) {
    $event->return = 'GUID-';
  }

  /**
   * Add GUID Option
   *
   * @param HookEvent $event
   */
  public function addInputfield(HookEvent $event){
    if (!$event->object instanceof InputfieldText) return;

    $data = $event->object;

    /** @var InputfieldCheckbox $field */
    $field = $this->modules->get('InputfieldCheckbox');
    $field->attr('name', 'generateGuid');
    $field->label = $this->_('Generate GUID');
    $field->description = $this->_('When checked, a globally unique identifier (GUID) will be generated when the page is created or viewed for the first time.');
    $field->attr('value', 1);

    if ($data->generateGuid) {
      $field->attr('checked', 'checked');
    } else {
      $field->collapsed = Inputfield::collapsedYes;
    }

    $event->return->append($field);
    
    // Add format selection field
    if ($data->generateGuid) {
      /** @var InputfieldSelect $formatField */
      $formatField = $this->modules->get('InputfieldSelect');
      $formatField->attr('name', 'guidFormat');
      $formatField->label = $this->_('GUID Format');
      $formatField->description = $this->_('Select the format for the generated identifier.');
      $formatField->columnWidth = 33;
      
      $formatField->addOption('uuid', $this->_('Standard UUID/GUID (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)'));
      $formatField->addOption('alphanumeric32', $this->_('32-digit Alphanumeric'));
      $formatField->addOption('alphanumeric64', $this->_('64-digit Alphanumeric'));
      $formatField->addOption('alphanumeric128', $this->_('128-digit Alphanumeric'));
      
      // Set default value if not already set
      if ($data->guidFormat) {
        $formatField->attr('value', $data->guidFormat);
      } else {
        $formatField->attr('value', 'uuid');
      }
      
      $event->return->append($formatField);
    }
    
    // Add prefix options
    if ($data->generateGuid) {
      /** @var InputfieldCheckbox $prefixField */
      $prefixField = $this->modules->get('InputfieldCheckbox');
      $prefixField->attr('name', 'useGuidPrefix');
      $prefixField->label = $this->_('Use GUID Prefix');
      $prefixField->description = $this->_('When checked, the generated identifier will include a prefix.');
      $prefixField->attr('value', 1);
      $prefixField->columnWidth = 33;
      
      if ($data->useGuidPrefix) {
        $prefixField->attr('checked', 'checked');
      }
      
      $event->return->append($prefixField);
      
      /** @var InputfieldText $prefixValueField */
      $prefixValueField = $this->modules->get('InputfieldText');
      $prefixValueField->attr('name', 'guidPrefix');
      $prefixValueField->label = $this->_('GUID Prefix');
      $prefixValueField->description = $this->_('Enter the prefix to be added to the generated identifier.');
      $prefixValueField->columnWidth = 33;
      
      // Set default value if not already set
      if ($data->guidPrefix !== null) {
        $prefixValueField->attr('value', $data->guidPrefix);
      } else {
        $prefixValueField->attr('value', 'GUID-');
      }
      
      // Show only if prefix is enabled
      // if (!$data->useGuidPrefix) {
      //   $prefixValueField->collapsed = Inputfield::collapsedYes;
      // }
      
      $event->return->append($prefixValueField);
    }
  }

  /**
   * Assign a GUID
   *
   * @param HookEvent $event
   */
  public function generateGuidValue(HookEvent $event) {
    if (!$event->object->generateGuid) return;

    $field = $event->object;
    $page = $this->pages->get($this->input->get->id);

    $field->setAttribute('disabled', true);

    // empty field? generate GUID
    if (!$field->value) {
      $format = $field->guidFormat ?: 'uuid';
      $guid = $this->createGUID($format);
      
      // Add prefix if enabled
      if ($field->useGuidPrefix) {
        $prefix = $field->guidPrefix !== null ? $field->guidPrefix : 'GUID-';
        $guid = $prefix . $guid;
      }

      // check uniqueness
      if ($this->pages->count("{$field->name}={$guid}")) $this->generateGuidValue($event);

      $field->set('value', $guid);
      $page->setAndSave($field->name, $guid);
    }
  }

  /**
   * Assign a GUID when a page is created
   *
   * @param HookEvent $event
   */
  public function generateGuidOnCreate(HookEvent $event) {
    $page = $event->arguments[0];
    
    // Get all fields for this page
    $fields = $page->getFields();
    
    foreach($fields as $field) {
      // Skip if not a text field
      if(!$field->type instanceof FieldtypeText) continue;
      
      // Skip if the field doesn't have the generateGuid option enabled
      if(!$field->generateGuid) continue;
      
      // Skip if the field already has a value
      if($page->get($field->name)) continue;
      
      // Get the format
      $format = $field->guidFormat ?: 'uuid';
      
      // Generate a GUID
      $guid = $this->createGUID($format);
      
      // Add prefix if enabled
      if ($field->useGuidPrefix) {
        $prefix = $field->guidPrefix !== null ? $field->guidPrefix : 'GUID-';
        $guid = $prefix . $guid;
      }
      
      // Check uniqueness
      if($this->pages->count("{$field->name}={$guid}")) {
        // Try again with a new GUID
        $guid = $this->createGUID($format);
        
        // Add prefix if enabled (for the new GUID)
        if ($field->useGuidPrefix) {
          $prefix = $field->guidPrefix !== null ? $field->guidPrefix : 'GUID-';
          $guid = $prefix . $guid;
        }
      }
      
      // Set the GUID value
      $page->set($field->name, $guid);
    }
    
    // Save the page with the new GUID(s)
    $page->save();
  }

  /**
   * Generate GUID
   * 
   * @param string $format Format of the ID to generate (uuid or alphanumeric32)
   * @return string The generated unique identifier
   */
  protected function createGUID($format = 'uuid') {
    if ($format === 'alphanumeric32') {
      return $this->createAlphanumeric32();
    }
    
    if ($format === 'alphanumeric64') {
      return $this->createAlphanumeric(64);
    }
    
    if ($format === 'alphanumeric128') {
      return $this->createAlphanumeric(128);
    }
    
    // Default to UUID format
    if (function_exists('com_create_guid')){
        $guid = com_create_guid();
    } else {
      $charId = strtoupper(md5(uniqid(rand(), true)));

      $separation = array(0 => 8, 8 => 4, 12 => 4, 16 => 4, 20 => 12);
      $chars = array();
      foreach ($separation as $start => $length) {
        $chars[] = substr($charId, $start, $length);
      }

      $guid = implode(chr(45), $chars);
    }

    return $guid;
  }
  
  /**
   * Generate a 32-digit alphanumeric identifier
   * 
   * @return string The generated 32-digit alphanumeric identifier
   */
  protected function createAlphanumeric32() {
    $chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $result = '';
    
    // Generate a random 32-character string using cryptographically secure random bytes
    $bytes = random_bytes(32);
    
    for ($i = 0; $i < 32; $i++) {
      $result .= $chars[ord($bytes[$i]) % strlen($chars)];
    }
    
    return $result;
  }
  
  /**
   * Generate an alphanumeric identifier of specified length
   * 
   * @param int $length The length of the identifier to generate
   * @return string The generated alphanumeric identifier
   */
  protected function createAlphanumeric($length) {
    $chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $result = '';
    
    // Generate a random string of specified length using cryptographically secure random bytes
    $bytes = random_bytes($length);
    
    for ($i = 0; $i < $length; $i++) {
      $result .= $chars[ord($bytes[$i]) % strlen($chars)];
    }
    
    return $result;
  }
}
